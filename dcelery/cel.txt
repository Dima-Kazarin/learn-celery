@app.task(queue='tasks')
def t1(a, b, message=None):
    time.sleep(3)
    result = a + b
    if message:
        result = f'{message}: {result}'
    return result


@app.task(queue='tasks')
def t2():
    time.sleep(3)
    return


@app.task(queue='tasks')
def t3():
    time.sleep(3)
    return


# app.conf.task_routes = {'newapp.tasks.task1': {'queue': 'queue1'}, 'newapp.tasks.task2': {'queue': 'queue2'}}
# app.conf.task_default_rate_limit = '1/m'
# app.conf.broker_transport_options = {
#     'priority_steps': list(range(10)),
#     'sep': ':',
#     'queue_order_strategy': 'priority',
# }

def test():
    res = t1.apply_async(args=[5, 10], kwargs={'message': 'The sum is'})

    if res.ready():
        print('Has completed')
    else:
        print('Still running')

    if res.successful():
        print('Completed successful')
    else:
        print('Error')

    try:
        task_res = res.get()
        print('task res: ', task_res)
    except Exception as e:
        print('Error:', str(e))

    exception = res.get(propagate=False)
    if exception:
        print('An exception occurred during task execution', str(exception))


def execute_sync():
    res = t1.apply_async(args=[5, 10], kwargs={'message': 'The sum is'})
    task_res = res.get()
    print('Task run sync')
    print(task_res)


def execute_async():
    res = t1.apply_async(args=[5, 10], kwargs={'message': 'The sum is'})
    print('Task run async')
    print('Task ID:', res.task_id)


app.autodiscover_tasks()
